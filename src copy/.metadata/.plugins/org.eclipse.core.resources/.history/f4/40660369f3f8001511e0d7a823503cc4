import java.applet.Applet;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

public class World extends Applet implements KeyListener, MouseListener{
	String mode = "Beginning"; //Will be used for bag, battle, and normal also 
	Trainer player, rival;
	int optionNum = 1; //Used for when there are options,
	int repaintNum = 1; //to make an arrow show and not show
	int step = 1; //Used for when there is a process that has steps, like the beginning with asking questions
	Boolean wPressed = false, aPressed = false, sPressed = false, dPressed = false, enterPressed = false, mousePressed = false;
	Boolean keyPressed = false; //Only used for typing names - using every key
	Boolean keysPressed[] = new Boolean[222]; //For if the key is pressed http://www.cambiaresearch.com/articles/15/javascript-key-codes
	Boolean canPress = false;
	Image Oak;
	Room currentRoom = new Room(16,12);
	Room screenRoom = new Room(16,12);
	static Room playerHouse;
	Point2D mouseCoords;
	Room homeTown;
	Room rivalHouse;
	public static Type fire, water, grass, electric, ground, rock, dark, fight, normal, flying, psychic, ghost, dragon, ice, bug, poison, steel;
	public void init() {
		Oak = Toolkit.getDefaultToolkit().getImage("images/oak.png");
		player = new Trainer("Name");
		rival = new Trainer("Player");
		for(int i = 0; i < keysPressed.length; i++){
			keysPressed[i] = false;
		}
		//Just for testing right now
		mode = "Normal";
		player.setGender("Boy");
		player.setName("Jacob");
		player.setCoordinates(10,10);
		rival.setGender("Boy");
		rival.setGender("Rival");
		//Ends testing right now
		
		
		setTypes();
		setRooms();
		currentRoom = playerHouse;
		
		setSize(600,600);
		addKeyListener(this);
		addMouseListener(this);
	}
	public void paint(Graphics g){
		Graphics2D g2 = (Graphics2D) g;
		//drawButton(g2, new Button("Step: " + step,10,200,80,25));
		setSize(600,600);
		setBackground(new Color(0,255,255));
		if(mode == "Beginning"){
			beginning(g2);
		} if (mode == "Normal"){
			normal(g2);
		}
		repaint();
	}

	//	public static void main(String[] args){
	//		setTypes();
	//		log(grass.getName() + " Weak attacking: " + grass.getWeakAttacking().length);
	//		for(int i = 0; i < grass.getWeakAttacking().length; i++){
	//			log("" + grass.getWeakAttacking()[i].getName());
	//		}
	//
	//		/*log(water.getName() + " Strong attacking");
	//		for(int i = 0; i < water.getStrongAttacking().length; i++){
	//			log("" + water.getStrongAttacking()[i].getName());
	//		}*/
	//	}
	public void beginning(Graphics2D g2){
		Color startColor = g2.getColor();
		//So that you can't click enter to skip through everything
		if(step == 1){
			Button newGame = new Button("New Game", 40, 20, 540, 80);
			//newGame.setTextCoordinates(new Point2D.Double(newGame.getTextCoordinates().getX(),newGame.getTextCoordinates().getY()+25));
			Polygon arrow;
			if(optionNum == 1){
				arrow = new Polygon(new int[] {15,25,15}, new int[] {50,55,60}, 3);
				if(enterPressed || buttonPressed(newGame)){	
					step++;
					optionNum = 1;
				} 
			} else {
				arrow = new Polygon(new int[] {15,25,15}, new int[] {50,55,60}, 3);
			}
			drawButton(g2, newGame);
			g2.fill(arrow);
		} else if((step >= 2 && step <= 5) || (step >= 7 && step <= 8)){
			Button newGame = new Button("On step " + step, 20, 500, 560, 80);
			if(step == 2){
				newGame.setText("Hi! My Name Is Professor Oak!");
			} else if(step == 3){
				newGame.setText("This is the World!");
			} else if(step == 4){
				if(aPressed){
					optionNum = 1;
				}
				if(dPressed){
					optionNum = 2;
				}
				if(optionNum == 1){
					newGame.setText("Are you a boy or a girl?   < boy >   girl");
				} else {
					newGame.setText("Are you a boy or a girl?      boy   < girl >");
				}
			} else if(step == 5){
				if(aPressed){
					optionNum = 1;
				}
				if(dPressed){
					optionNum = 2;
				}
				if(optionNum == 1){
					newGame.setText("You're a " + player.getGender() + "? < Yes >   No");
				} else {
					newGame.setText("You're a " + player.getGender() + "?    Yes   < No >");
				}
			} else if(step == 7){
				if(aPressed){
					optionNum = 1;
				}
				if(dPressed){
					optionNum = 2;
				}
				if(optionNum == 1){
					newGame.setText("Is your rival a boy or a girl?   < boy >   girl");
				} else if(optionNum == 2) {
					newGame.setText("Is your rival a boy or a girl?      boy   < girl >");
				}
			} else if(step == 8){
				if(aPressed){
					optionNum = 1;
				}
				if(dPressed){
					optionNum = 2;
				}
				if(optionNum == 1){
					newGame.setText("Your rival is a " + rival.getGender() + "? < Yes >   No");
				} else if (optionNum == 2){
					newGame.setText("Your rival is a " + rival.getGender() + "?    Yes   < No >");
				}
			}
			drawButton(g2, newGame);
			g2.drawImage (Oak, this.getWidth()/2-((Oak.getWidth(this)/2)), 50, (int) Oak.getWidth(this), (int) Oak.getHeight(this), this);
			if(repaintNum % 500 < 250 && step < 4){ //Displays the arrow half the time, but the higher the numbers are, the longer the arrow stays on and disappears for
				Polygon arrow = new Polygon(new int[] {560,570,565}, new int[] {535,535,545}, 3);
				g2.fill(arrow);
			}
			repaintNum++;
			if(canPress && (enterPressed || buttonPressed(newGame))){
				if(step == 4){
					if(optionNum == 1){
						player.setGender("Boy");
					} else {
						player.setGender("Girl");
					}
				} else if(step == 5){
					if(optionNum == 2){
						step = 3; //so that step++ will make it 4 and then you can rechoose boy or girl
					} else {
						player.setName("");
					}
				} else if(step == 7){
					if(optionNum == 1){
						rival.setGender("Boy");
					} else {
						rival.setGender("Girl");
					}
				} else if(step == 8){
					if(optionNum == 2){
						step = 6;
						//so that step++ down low will make it 7 and then rechoose
					} else {
						mode = "Normal";
						rival.setName("");
					}
				}
				step++;
				log("" + step);
				optionNum = 1;
				repaintNum = 1;
				canPress = false;
			}
			if(repaintNum > 200){
				canPress = true;
			}
		} else if(step == 6){
			Button name = new Button(player.getName(), 40, 120, 540, 80);
			Button newGame = new Button("What is your name?", 40, 20, 540, 80);
			this.addKeyListener(new KeyListener() {
                @Override
                public void keyTyped(KeyEvent e) {
                	
                }
                @Override
                public void keyReleased(KeyEvent e) {
                	keysPressed[e.getKeyCode()] = false;
                }
                @Override
                public void keyPressed(KeyEvent e) {
                	
                	//if(!keyPressed){
                	if(!keysPressed[e.getKeyCode()]){
                		keysPressed[e.getKeyCode()] = true;
                		//System.out.println("Pressed " + e.getKeyCode());
                		if(e.getKeyCode() == 10){ //Enter is Pressed
                			if(player.getName().length() > 1 && optionNum != 2){ //The optionNum != 2 is to prevent error from step 8
                				step++;
                				System.out.println("Name Ended");
                			}
                		} else if(e.getKeyCode() == 8){ //Delete Backspace is pressed
                			if(player.getName().length() > 1){
                				player.setName(player.getName().substring(0, player.getName().length()-1));
                			}
                		} else if(e.getKeyCode() == 16){
                			keysPressed[e.getKeyCode()] = false;
                		}
                		else if(player.getName().length() < 10){
                			player.setName(player.getName() + e.getKeyChar());
                		}
                	}
                }
            });
			drawButton(g2,newGame);
			drawButton(g2,name);
			
		}
		g2.setBackground(startColor);
	}
	public void normal(Graphics2D g2){
		for(int i = 0; i < screenRoom.getWidth(); i++){
			for(int j = 0; j < screenRoom.getHeight(); j++){
				screenRoom.setTile(i, j, currentRoom.getTiles()[i][j].getImage());
			}
		}
		drawRoom(g2,screenRoom);
		
		//Draw currentRoom
	}
	public void drawRoom(Graphics2D g2, Room room){
		for(int i = 0; i < room.getWidth(); i++){
			for(int j = 0; j < room.getHeight(); j++){
				g2.drawImage(room.getTiles()[i][j].getImage(), i*40, j*40, 40, 40, this);
				if(room.getTiles()[i][j].containsItem()){
					g2.drawImage(room.getTiles()[i][j].getItem().getImage(), (i*40) + (20 - (room.getTiles()[i][j].getItem().getImage().getWidth(this))/2), (j*40) + (20 - (room.getTiles()[i][j].getItem().getImage().getHeight(this))/2), room.getTiles()[i][j].getItem().getImage().getWidth(this), room.getTiles()[i][j].getItem().getImage().getHeight(this), this);
				}
			}
		}
		//g2.drawImage (Oak, this.getWidth()/2-((Oak.getWidth(this)/2)), 50, (int) Oak.getWidth(this), (int) Oak.getHeight(this), this);
	}
	public void drawButton(Graphics2D g2, Button b){
		Color startColor = g2.getColor();
		Font startFont = g2.getFont();
		g2.setColor(b.getButtonColor());
		g2.fill(new Rectangle2D.Double(b.getX(), b.getY(), b.getWidth(), b.getHeight()));
		g2.setFont(b.getFont());
		g2.setColor(b.getTextColor());
		g2.drawString(b.getText(), (float) b.getTextCoordinates().getX(), (float) b.getTextCoordinates().getY());
		g2.setFont(startFont);
		g2.setColor(startColor);
	}
	public Boolean buttonPressed(Button b){
		Boolean isPressed = false;
		if(mousePressed){
			if(new Rectangle2D.Double(mouseCoords.getX(),mouseCoords.getY(),1,1).intersects(b.getButton())){
				isPressed = true;
			}
		}
		return isPressed;
	}
	public static void setRooms(){
		playerHouse = new Room(10,10);
		
	}
	public static void setTypes(){
		fire = new Type("Fire");
		water = new Type("Water");
		grass = new Type("Grass");
		electric = new Type("Electric");
		ground = new Type("Ground");
		rock = new Type("Rock");
		dark = new Type("Dark");
		fight = new Type("Fight");
		normal = new Type("Normal");
		flying = new Type("Flying");
		psychic = new Type("Psychic");
		ghost = new Type("Ghost");
		dragon = new Type("Dragon");
		ice = new Type("Ice");
		bug = new Type("Bug");
		poison = new Type("Poison");
		steel = new Type("Steel");


		addStrong(fire, new Type[] {bug, grass, ice, steel});
		addWeak(fire, new Type[] {fire, water, rock, dragon});

		addStrong(water, new Type[] {fire, ground, rock});
		addWeak(water, new Type[] {water, grass, dragon});

		addWeak(normal, new Type[] {rock, steel});
		addCantAttack(normal, new Type[]{ghost});

		addStrong(electric, new Type[] {water, flying});
		addWeak(electric, new Type[] {electric, grass, dragon});
		addCantAttack(electric, new Type[]{ground});

		addStrong(grass, new Type[] {water, ground, rock});
		addWeak(grass, new Type[] {fire, grass, poison, bug, flying, dragon, steel});

		addStrong(ice, new Type[] {grass, ground, flying, dragon});
		addWeak(ice, new Type[] {fire, water, ice, steel});

		addStrong(fight, new Type[]{normal, ice, rock, dark, steel});
		addWeak(fight, new Type[] {poison, flying, psychic, bug});
		addCantAttack(fight, new Type[] {ghost});

		addStrong(poison, new Type[] {grass});
		addWeak(poison, new Type[] {poison, rock, ground, ghost});

		addStrong(ground, new Type[] {fire, electric, poison, rock, steel});
		addWeak(ground, new Type[] {grass, bug});
		addCantAttack(ground, ghost);

		addStrong(flying, new Type[] {grass, fight, bug});
		addWeak(flying, new Type[] {electric, rock, steel});

		addStrong(psychic, new Type[] {fight, poison});
		addWeak(psychic, new Type[] {psychic, steel});
		addCantAttack(psychic, dark);

		addStrong(bug, new Type[] {grass, psychic, dark});
		addWeak(bug, new Type[] {fire, fight, poison, flying, dark, steel});

		addStrong(rock, new Type[] {fire, ice, flying, bug});
		addWeak(rock, new Type[] {fight, ground, steel});

		addStrong(ghost, new Type[] {psychic, ghost});
		addWeak(ghost, new Type[] {dark, steel});
		addCantAttack(ghost, new Type[] {normal});

		addStrong(dragon, new Type[] {dragon});
		addWeak(dragon, new Type[] {steel});


		addStrong(dark, new Type[] {psychic, ghost});
		addWeak(dark, new Type[] {fight, dark, steel});

		addStrong(steel, new Type[] {ice, rock});
		addWeak(steel, new Type[] {fire, water, electric, steel});


	}
	public static void addStrong(Type type1, Type type2){
		type1.setStrongAttacking(type2);
		type2.setWeakDefending(type1);
	}
	public static void addStrong(Type type1, Type[] types){
		if(types != null){
			for (int i = 0; i < types.length; i++){
				addStrong(type1, types[i]);
			}
		}
	}
	public static void addWeak(Type type1, Type type2){
		type1.setWeakAttacking(type2);
		type2.setStrongDefending(type1);
	}
	public static void addWeak(Type type1, Type[] types){
		if(types != null){
			for (int i = 0; i < types.length; i++){
				addWeak(type1, types[i]);
			}
		}
	}
	public static void addCantAttack(Type type1, Type type2){
		type1.cantAttack(type2);
		type2.cantBeAttackedBy(type1);
	}
	public static void addCantAttack(Type type1, Type[] types){
		if(types != null){
			for (int i = 0; i < types.length; i++){
				addCantAttack(type1, types[i]);
			}
		}
	}
	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		mousePressed = true;
		mouseCoords = new Point2D.Double(e.getX(), e.getY());
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		mousePressed = false;
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub

		switch (e.getKeyCode()){
		case KeyEvent.VK_W:
			wPressed = true;
			break;
		case KeyEvent.VK_A:
			aPressed = true;
			break;
		case KeyEvent.VK_S:
			sPressed = true;
			break;
		case KeyEvent.VK_D:
			dPressed = true;
			break;
		case KeyEvent.VK_UP:
			wPressed = true;
			break;
		case KeyEvent.VK_LEFT:
			aPressed = true;
			break;
		case KeyEvent.VK_DOWN:
			sPressed = true;
			break;
		case KeyEvent.VK_RIGHT:
			dPressed = true;
			break;
		case KeyEvent.VK_ENTER:
			enterPressed = true;
			break;

		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		switch (e.getKeyCode()){
		case KeyEvent.VK_W:
			wPressed = false;
			break;
		case KeyEvent.VK_A:
			aPressed = false;
			break;
		case KeyEvent.VK_S:
			sPressed = false;
			break;
		case KeyEvent.VK_D:
			dPressed = false;
			break;
		case KeyEvent.VK_UP:
			wPressed = false;
			break;
		case KeyEvent.VK_LEFT:
			aPressed = false;
			break;
		case KeyEvent.VK_DOWN:
			sPressed = false;
			break;
		case KeyEvent.VK_RIGHT:
			dPressed = false;
			break;
		case KeyEvent.VK_ENTER:
			enterPressed = false;
			break;

		}
	}
	public static void log(String s){
		System.out.println(s);
	}
}
