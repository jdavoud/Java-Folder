import java.applet.Applet;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

public class World extends Applet implements KeyListener, MouseListener{
	String mode = "Beginning"; //Will be used for bag, battle, and normal also 
	Trainer player;
	int optionNum = 1; //Used for when there are options
	int step = 1; //Used for when there is a process that has steps, like the beginning with asking questions
	Boolean wPressed = false, aPressed = false, sPressed = false, dPressed = false, enterPressed = false, mousePressed = false;
	Image Oak;
	public static Point2D mouseCoords;
	public static Type fire, water, grass, electric, ground, rock, dark, fight, normal, flying, psychic, ghost, dragon, ice, bug, poison, steel;
	public void init() {
		Oak = Toolkit.getDefaultToolkit().getImage("images/oak.png");
		
		System.out.println(this.getClass().getResource("images/oak.png"));
		

		setTypes();
		setSize(600,600);
		addKeyListener(this);
		addMouseListener(this);
	}
	public void paint(Graphics g){
		Graphics2D g2 = (Graphics2D) g;
		setSize(600,600);
		setBackground(new Color(0,255,255));
		if(mode == "Beginning"){
			beginning(g2);
		}
		repaint();
	}

	//	public static void main(String[] args){
	//		setTypes();
	//		log(grass.getName() + " Weak attacking: " + grass.getWeakAttacking().length);
	//		for(int i = 0; i < grass.getWeakAttacking().length; i++){
	//			log("" + grass.getWeakAttacking()[i].getName());
	//		}
	//
	//		/*log(water.getName() + " Strong attacking");
	//		for(int i = 0; i < water.getStrongAttacking().length; i++){
	//			log("" + water.getStrongAttacking()[i].getName());
	//		}*/
	//	}
	public void beginning(Graphics2D g2){
		Color startColor = g2.getColor();
		if(step == 1){
			Button newGame = new Button("New Game", 40, 20, 540, 80);
			newGame.setTextCoordinates(new Point2D.Double(newGame.getTextCoordinates().getX(),newGame.getTextCoordinates().getY()+25));
			Polygon arrow;
			if(optionNum == 1){
				arrow = new Polygon(new int[] {15,25,15}, new int[] {50,55,60}, 3);
				if(enterPressed || mousePressed){	
					if(enterPressed){
						step++;
					}
					else {
						if(new Rectangle2D.Double(mouseCoords.getX(),mouseCoords.getY(),1,1).intersects(newGame.getButton())){
							step++;
						}
					}
				} 
			} else {
				arrow = new Polygon(new int[] {15,25,15}, new int[] {50,55,60}, 3);
			}
			drawButton(g2, newGame);
			g2.fill(arrow);
		} else if(step == 2){
			g2.drawImage (Oak, 10, 10, (int) Oak.getWidth(this), (int) Oak.getHeight(this), this);
			g2.drawImage(Oak, 10, 10, this);
		}
		g2.setBackground(startColor);
	}
	public void drawButton(Graphics2D g2, Button b){
		Color startColor = g2.getColor();
		Font startFont = g2.getFont();
		g2.setColor(b.getButtonColor());
		g2.fill(new Rectangle2D.Double(b.getX(), b.getY(), b.getWidth(), b.getHeight()));
		g2.setFont(b.getFont());
		g2.setColor(b.getTextColor());
		g2.drawString(b.getText(), (float) b.getTextCoordinates().getX(), (float) b.getTextCoordinates().getY());
		g2.setFont(startFont);
		g2.setColor(startColor);
	}
	public static void setTypes(){
		fire = new Type("Fire");
		water = new Type("Water");
		grass = new Type("Grass");
		electric = new Type("Electric");
		ground = new Type("Ground");
		rock = new Type("Rock");
		dark = new Type("Dark");
		fight = new Type("Fight");
		normal = new Type("Normal");
		flying = new Type("Flying");
		psychic = new Type("Psychic");
		ghost = new Type("Ghost");
		dragon = new Type("Dragon");
		ice = new Type("Ice");
		bug = new Type("Bug");
		poison = new Type("Poison");
		steel = new Type("Steel");


		addStrong(fire, new Type[] {bug, grass, ice, steel});
		addWeak(fire, new Type[] {fire, water, rock, dragon});

		addStrong(water, new Type[] {fire, ground, rock});
		addWeak(water, new Type[] {water, grass, dragon});

		addWeak(normal, new Type[] {rock, steel});
		addCantAttack(normal, new Type[]{ghost});

		addStrong(electric, new Type[] {water, flying});
		addWeak(electric, new Type[] {electric, grass, dragon});
		addCantAttack(electric, new Type[]{ground});

		addStrong(grass, new Type[] {water, ground, rock});
		addWeak(grass, new Type[] {fire, grass, poison, bug, flying, dragon, steel});

		addStrong(ice, new Type[] {grass, ground, flying, dragon});
		addWeak(ice, new Type[] {fire, water, ice, steel});

		addStrong(fight, new Type[]{normal, ice, rock, dark, steel});
		addWeak(fight, new Type[] {poison, flying, psychic, bug});
		addCantAttack(fight, new Type[] {ghost});

		addStrong(poison, new Type[] {grass});
		addWeak(poison, new Type[] {poison, rock, ground, ghost});

		addStrong(ground, new Type[] {fire, electric, poison, rock, steel});
		addWeak(ground, new Type[] {grass, bug});
		addCantAttack(ground, ghost);

		addStrong(flying, new Type[] {grass, fight, bug});
		addWeak(flying, new Type[] {electric, rock, steel});

		addStrong(psychic, new Type[] {fight, poison});
		addWeak(psychic, new Type[] {psychic, steel});
		addCantAttack(psychic, dark);

		addStrong(bug, new Type[] {grass, psychic, dark});
		addWeak(bug, new Type[] {fire, fight, poison, flying, dark, steel});

		addStrong(rock, new Type[] {fire, ice, flying, bug});
		addWeak(rock, new Type[] {fight, ground, steel});

		addStrong(ghost, new Type[] {psychic, ghost});
		addWeak(ghost, new Type[] {dark, steel});
		addCantAttack(ghost, new Type[] {normal});

		addStrong(dragon, new Type[] {dragon});
		addWeak(dragon, new Type[] {steel});


		addStrong(dark, new Type[] {psychic, ghost});
		addWeak(dark, new Type[] {fight, dark, steel});

		addStrong(steel, new Type[] {ice, rock});
		addWeak(steel, new Type[] {fire, water, electric, steel});


	}
	public static void addStrong(Type type1, Type type2){
		type1.setStrongAttacking(type2);
		type2.setWeakDefending(type1);
	}
	public static void addStrong(Type type1, Type[] types){
		if(types != null){
			for (int i = 0; i < types.length; i++){
				addStrong(type1, types[i]);
			}
		}
	}
	public static void addWeak(Type type1, Type type2){
		type1.setWeakAttacking(type2);
		type2.setStrongDefending(type1);
	}
	public static void addWeak(Type type1, Type[] types){
		if(types != null){
			for (int i = 0; i < types.length; i++){
				addWeak(type1, types[i]);
			}
		}
	}
	public static void addCantAttack(Type type1, Type type2){
		type1.cantAttack(type2);
		type2.cantBeAttackedBy(type1);
	}
	public static void addCantAttack(Type type1, Type[] types){
		if(types != null){
			for (int i = 0; i < types.length; i++){
				addCantAttack(type1, types[i]);
			}
		}
	}
	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		mousePressed = true;
		mouseCoords = new Point2D.Double(e.getX(), e.getY());
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		mousePressed = false;
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub

		switch (e.getKeyCode()){
		case KeyEvent.VK_W:
			wPressed = true;
			break;
		case KeyEvent.VK_A:
			aPressed = true;
			break;
		case KeyEvent.VK_S:
			sPressed = true;
			break;
		case KeyEvent.VK_D:
			dPressed = true;
			break;
		case KeyEvent.VK_ENTER:
			enterPressed = true;
			break;

		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		switch (e.getKeyCode()){
		case KeyEvent.VK_W:
			wPressed = false;
			break;
		case KeyEvent.VK_A:
			aPressed = false;
			break;
		case KeyEvent.VK_S:
			sPressed = false;
			break;
		case KeyEvent.VK_D:
			dPressed = false;
			break;
		case KeyEvent.VK_ENTER:
			enterPressed = false;
			break;

		}
	}
	public static void log(String s){
		System.out.println(s);
	}
}
