import javax.swing.*;
import javax.swing.event.ChangeEvent;

import java.awt.*;
import java.awt.event.*;
import java.util.Hashtable;

public class slider {
	
	public static JFrame frame;
	public static Container content;
	public static JSlider s1, s2, s3;
	public static int n1, n2, n3;
	public static Hashtable labelTable;
	
	public static void main(String[] args) {
		bf();
		sliders();
		frame.setVisible(true);
	}
	public static void sliders(){
		
		
		s1 = new JSlider(JSlider.HORIZONTAL, 0 , 255 , 238);
		s2 = new JSlider(JSlider.HORIZONTAL, 0 , 255 , 238);
		s3 = new JSlider(JSlider.HORIZONTAL, 0 , 255 , 238);
		content.add(s1);
		content.add(s2);
		content.add(s3);
		Hashtable<Integer, JLabel> labelTable = new Hashtable<Integer, JLabel>();
		labelTable.put( new Integer( 0 ), new JLabel("0") );
		labelTable.put( new Integer( 238 ), new JLabel("238") );
		labelTable.put( new Integer( 255 ), new JLabel("255") );
		s1.setLabelTable(labelTable);
		s1.setPaintLabels(true);
		s2.setLabelTable(labelTable);
		s2.setPaintLabels(true);
		s3.setLabelTable(labelTable);
		s3.setPaintLabels(true);
		s1.addChangeListener(this);
		s2.addChangeListener(this);
		s3.addChangeListener(this);
		
	}
	public static void bf(){
		
		frame = new JFrame("Slider");
		frame.setSize(600,200);
		frame.setResizable(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		content = frame.getContentPane();
		content.setLayout(new GridLayout(3,1));
		
		
	}
	public static void color(){
		
		n1 = s1.getValue();
		n2 = s2.getValue();
		n3 = s3.getValue();
		frame.setBackground(new Color(n1,n2,n3));
	}
	public void stateChanged(ChangeEvent e) {
	    
	    if (s1.getValueIsAdjusting()||s2.getValueIsAdjusting()||s3.getValueIsAdjusting()) {
	        color();
	    }
	}
}
